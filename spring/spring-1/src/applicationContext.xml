<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">

	<!-- 
		配置 bean 
		class: bean 的全类名，通过反射的方式在 IOC 容器中创建 Bean. 所以要求 Bean 中必须有无参数的构造器
		id:标识容器中的 bean, id 唯一 
	-->
	<bean id="helloWorld" class="cn.zyf.spring.beans.HelloWorld">
		<property name="name" value="Spring"></property>
	</bean>
	
	<!-- 通过构造方法来配置 bean 的属性 -->
	<bean id="car" class="cn.zyf.spring.beans.Car">
		<constructor-arg value="Audi" index="0"></constructor-arg>
		<constructor-arg value="ShangHai" index="1"></constructor-arg>
		<constructor-arg value="300000" type="double"></constructor-arg>
	</bean>
	
	<!-- 使用构造器注入属性可以指定参数的位置和参数的类型 以区分重载的构造器 -->
	<bean id="car2" class="cn.zyf.spring.beans.Car">
		<constructor-arg value="Baoma" type="java.lang.String"></constructor-arg>
		<!-- 如果字面值包含特殊字符可以使用<![CDATA[]]>包裹起来 -->
		<!-- 属性值可以使用 value 子节点进行配置 -->
		<constructor-arg type="java.lang.String">
			<value><![CDATA[<ShangHai^>]]></value>
		</constructor-arg>
		<constructor-arg type="int">
			<value>250</value>
		</constructor-arg>
	</bean>
	
	<bean id="person" class="cn.zyf.spring.beans.Person">
		<property name="name" value="Tom"></property>
		<property name="age" value="24"></property>
		<!-- 可以使用 property 的 ref 属性建立 bean 之间的引用关系 --> 
		<!-- 把 bean 实例对象 car2 注入为 bean 实例对象 person 的 car 属性值 -->
		<!-- 
		<property name="car" ref="car2"></property>
		 -->
		<!-- 
		<property name="car">
			<ref bean="car2"/>
		</property>
		 -->
		<!-- 内部 bean 不能被外部 bean 引用 只能在内部引用--> 
		<property name="car">
		    <bean id="car3" class="cn.zyf.spring.beans.Car">
		 	   <constructor-arg value="Ford"></constructor-arg>
		 	   <constructor-arg value="Changan"></constructor-arg>
		 	   <constructor-arg value="200000" type="double"></constructor-arg>
		    </bean>
		</property>
		<property name="car.maxSpeed" value="260"></property>
	</bean>
	
	<bean id="person2" class="cn.zyf.spring.beans.Person">
		<constructor-arg value="Jerry"></constructor-arg>
		<constructor-arg value="25"></constructor-arg>
		<!-- 
		<constructor-arg ref="car"></constructor-arg>
		 -->
		<!-- 测试赋值 null -->
		<!-- 
		<constructor-arg><null/></constructor-arg>
		 --> 
		<constructor-arg ref="car"></constructor-arg>
		<!-- 为级联属性赋值 注意:属性需要先初始化后才能为级联属性赋值 否则有异常 和 Struts2 不同 -->
		<property name="car.maxSpeed" value="250"></property>
	</bean>
	
	<!-- 测试如何测试集合属性 -->
	<bean id="person3" class="cn.zyf.spring.beans.collections.Person">
		<property name="name" value="Mike"></property>
		<property name="age" value="27"></property>
		<property name="cars">
			<!-- 使用 list 节点为 list 类型的属性赋值 -->
			<list>
				<ref bean="car"/>
				<ref bean="car2"/>
				<bean class="cn.zyf.spring.beans.Car">
		 	    <constructor-arg value="Ford"></constructor-arg>
		 	    <constructor-arg value="Changan"></constructor-arg>
		 	    <constructor-arg value="200000" type="double"></constructor-arg>
		    </bean>
			</list>
		</property>
	</bean>
	
	<!-- 配置 map 属性值 -->
	<bean id="newPerson" class="cn.zyf.spring.beans.collections.NewPerson">
		<property name="name" value="Rose"></property>
		<property name="age" value="28"></property>
		<property name="cars">
			<!-- 使用 map 节点及 map 的 entry 配置 Map 类型的成员变量 -->
			<map>
				<entry key="AA" value-ref="car"></entry>
				<entry key="BB" value-ref="car2"></entry>
			</map>
		</property>
	</bean>
	
	<!-- 配置 Properties 属性值 -->
	<bean id="dataSource" class="cn.zyf.spring.beans.collections.DataSource">
		<property name="properties">
			<!-- 使用 props 和 prop 子节点来为 Properties 属性赋值 -->
			<props>
				<prop key="user">root</prop>
				<prop key="password">1234</prop>
				<prop key="jdbcUrl">jdbc:mysql:///test</prop>
				<prop key="driverClass">com.mysql.jdbc.Driver</prop>
			</props>
		</property>
	</bean>
	
	<!-- 配置单例的集合 Bean，以供多个 Bean 进行引用，需要导入 util 命名空间 -->
	<util:list id="cars">
		<ref bean="car"/>
		<ref bean="car2"/>
	</util:list>
	
	<bean id="person4" class="cn.zyf.spring.beans.collections.Person">
		<property name="name" value="Jack"></property>
		<property name="age" value="29"></property>
		<property name="cars" ref="cars"></property>
	</bean>
	
	<!-- 通过 P 命名空间为 bean 的属性赋值，需要先导入 P 命名空间. 相对于传统的配置方式更加的简洁 -->
	<bean id="person5" class="cn.zyf.spring.beans.collections.Person" 
		p:age="30" p:name="Queen" p:cars-ref="cars"></bean>
	
	
</beans>
